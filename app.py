import time
import requests
import pandas as pd
import streamlit as st
import plotly.express as px

# === üí™ –î–ê–ù–ù–´–ï –û –ü–û–†–¢–§–ï–õ–ï (–æ–±–Ω–æ–≤–ª–µ–Ω–æ) === #
portfolio = {
    "$CHENGU": {"address": "0xd045e0686a784e272e651fc2c08324edabe7403a", "amount": 721740, "entry_price": 0.0011},
    "$POLLY": {"address": "0x987cf44f3f5d854ec0703123d7fd003a8b56ebb4", "amount": 1860000, "entry_price": 0.00008},
    "$ABSTER": {"address": "0xc325b7e2736a5202bd860f5974d0aa375e57ede5", "amount": 90000, "entry_price": 0.00927},
    "$NUTZ": {"address": "0x440b408ec70c5755bcdea0c902df2757ef0d875f", "amount": 211480, "entry_price": 0.00079}
}

# === üîÆ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ï–ù–´ –¢–û–ö–ï–ù–ê === #
def get_token_data(token_address):
    url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
    response = requests.get(url).json()
    
    if "pairs" in response and response["pairs"]:
        pair = response["pairs"][0]
        return {
            "price": float(pair["priceUsd"]),
            "change_24h": float(pair["priceChange"]["h24"])
        }
    return {"price": 0, "change_24h": 0}

# === üìä Streamlit UI === #
st.set_page_config(page_title="Crypto Portfolio Tracker", layout="wide")
st.title("üìä Crypto Portfolio Tracker")

prices, values, changes, initial_values, profit_losses = {}, {}, {}, {}, {}

for token, data in portfolio.items():
    token_data = get_token_data(data["address"])
    price = token_data["price"]
    change_24h = token_data["change_24h"]
    
    value = price * data["amount"]
    initial_value = data["entry_price"] * data["amount"]
    profit_loss = value - initial_value
    
    prices[token] = price
    values[token] = value
    changes[token] = change_24h
    initial_values[token] = initial_value
    profit_losses[token] = profit_loss

# === –í—ã—á–∏—Å–ª—è–µ–º % –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è === #
total_portfolio_value = sum(values.values())
percentages = {token: (val / total_portfolio_value) * 100 for token, val in values.items()}

# === –°–æ–∑–¥–∞–µ–º DataFrame === #
df = pd.DataFrame({
    "Token": [f'<a href="https://www.dexscreener.com/abstract/{data["address"]}" target="_blank">{token}</a>' for token, data in portfolio.items()],
    "Price ($)": [f"{price:.6f}" for price in prices.values()],
    "Amount": [portfolio[t]["amount"] for t in portfolio],
    "Value ($)": [f"{value:.2f}" for value in values.values()],
    "Entry Price ($)": [f"{portfolio[t]['entry_price']:.6f}" for t in portfolio],
    "Invested ($)": [f"{initial_value:.2f}" for initial_value in initial_values.values()],
    "Change 24h (%)": [f"{change:.2f}" for change in changes.values()],
    "Profit/Loss ($)": [f"{profit_loss:.2f}" for profit_loss in profit_losses.values()],
    "% of Portfolio": [f"{percentage:.2f}" for percentage in percentages.values()]
})

# === –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ò—Ç–æ–≥–æ === #
total_value = sum(values.values())
total_invested = sum(initial_values.values())
total_profit_loss = sum(profit_losses.values())

# –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è 24h
total_change_24h = ((total_value - total_invested) / total_invested) * 100 if total_invested > 0 else 0

# –°—Ç—Ä–æ–∫–∞ –ò—Ç–æ–≥–æ
total_row = pd.DataFrame([{
    "Token": "–ò—Ç–æ–≥–æ",
    "Price ($)": "---",
    "Amount": "---",
    "Value ($)": f"{total_value:.2f}",
    "Entry Price ($)": "---",
    "Invested ($)": f"{total_invested:.2f}",
    "Change 24h (%)": f"{total_change_24h:.2f}",
    "Profit/Loss ($)": f"{total_profit_loss:.2f}",
    "% of Portfolio": "100.00"
}])

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
df_with_total = pd.concat([df, total_row], ignore_index=True)

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ === #
def style_positive_negative(val):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —è—á–µ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏–π"""
    if isinstance(val, (int, float)):
        if val > 0:
            return "background-color: green; color: white;"
        elif val < 0:
            return "background-color: red; color: white;"
    return ""

# === –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ Change 24h (%) –∏ Profit/Loss ($) === #
df_styled = df_with_total.style.applymap(style_positive_negative, subset=["Change 24h (%)", "Profit/Loss ($)"])

# –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ò—Ç–æ–≥–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
df_for_graph = df_with_total[df_with_total["Token"] != "–ò—Ç–æ–≥–æ"]

# === –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –∏ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞) === #
st.markdown(f'<style>table {{overflow-x: auto;}}</style>', unsafe_allow_html=True)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ to_html() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞–º–∏ –∏ –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
df_html = df_styled.to_html(escape=False, index=False)
st.markdown(df_html, unsafe_allow_html=True)

# === –ì–†–ê–§–ò–ö 1 ‚Äî Pie Chart (–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è) === #
fig_pie = px.pie(df_for_graph, names="Token", values="Value ($)", title="Portfolio Distribution")
st.plotly_chart(fig_pie)

# === –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è === #
st.text("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å—Ç–µ–π—Ç (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
if "last_update" not in st.session_state:
    st.session_state.last_update = time.time()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥, –æ–±–Ω–æ–≤–ª—è–µ–º
if time.time() - st.session_state.last_update > 10:
    st.session_state.last_update = time.time()
    st.experimental_rerun()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

